<?xml version="1.0"?>
<doc>
    <assembly>
        <name>scrgrab</name>
    </assembly>
    <members>
        <member name="T:scrgrab.Classes.Capture">
            <summary>
            Capture a screen image
            </summary>
            <summary>
            Enumeration deining the types of screen
            </summary>
        </member>
        <member name="M:scrgrab.Classes.Capture.#ctor(System.String)">
            <summary>
            default constructor
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:scrgrab.Classes.Capture.capture(scrgrab.Classes.Capture.Screens)">
            <summary>
            capture the current screen image and save as the filename that was provided when this object was created.
            </summary>
        </member>
        <member name="T:scrgrab.Classes.Capture.Screens">
            <summary>
            Types of screen
            </summary>
        </member>
        <member name="F:scrgrab.Classes.Capture.Screens.All">
            <summary>
            All screens
            </summary>
        </member>
        <member name="F:scrgrab.Classes.Capture.Screens.Primary">
            <summary>
            Only the primary screen
            </summary>
        </member>
        <member name="M:scrgrab.Classes.Capture.Parse(System.String)">
            <summary>
            Parse a string to it's equivalent Screens enum or return a default if the string cannot be parsed
            </summary>
            <param name="value">the value to parse</param>
            <returns>parsed value or a default</returns>
        </member>
        <member name="T:scrgrab.Classes.Configuration">
            <summary>
            static configuration class
            </summary>
        </member>
        <member name="P:scrgrab.Classes.Configuration.Filename">
            <summary>
            readonly - calculates the current filename
            </summary>
        </member>
        <member name="P:scrgrab.Classes.Configuration.History">
            <summary>
            the length of time before old images are deleted
            </summary>
        </member>
        <member name="P:scrgrab.Classes.Configuration.Interval">
            <summary>
            the interval, in minutes, between each event
            </summary>
        </member>
        <member name="P:scrgrab.Classes.Configuration.StartTime">
            <summary>
            Start time
            </summary>
        </member>
        <member name="P:scrgrab.Classes.Configuration.EndTime">
            <summary>
             end time
            </summary>
        </member>
        <member name="P:scrgrab.Classes.Configuration.WorkingFolder">
            <summary>
            the working folder
            </summary>
        </member>
        <member name="P:scrgrab.Classes.Configuration.Screen">
            <summary>
            which screen to track
            </summary>
        </member>
        <member name="M:scrgrab.Classes.Configuration.GetOperationalFrom(System.Int32@,System.Int32@)">
            <summary>
            calculates the time when an event should start operation. Date part is always set to 1/1/2000
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <returns>DateTime</returns>
        </member>
        <member name="M:scrgrab.Classes.Configuration.SetOperationalFrom(System.Int32,System.Int32)">
            <summary>
            sets the time when an event should start operation. Date part is always set to 1/1/2000
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
        </member>
        <member name="M:scrgrab.Classes.Configuration.GetOperationalTo(System.Int32@,System.Int32@)">
            <summary>
            calculates the time when an event should end operation. Date part is always set to 1/1/2000
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
            <returns>DateTime</returns>
        </member>
        <member name="M:scrgrab.Classes.Configuration.SetOperationalTo(System.Int32,System.Int32)">
            <summary>
            Sets the time when an event should end operation. Date part is always set to 1/1/2000
            </summary>
            <param name="hour"></param>
            <param name="minute"></param>
        </member>
        <member name="M:scrgrab.Classes.Configuration.Log">
            <summary>
            log the contents
            </summary>
        </member>
        <member name="T:scrgrab.Classes.ImageManager">
            <summary>
            Manage list of images
            </summary>
        </member>
        <member name="T:scrgrab.Classes.ImageManager.ImageInfo">
            <summary>
            nested class to hold details of each image
            </summary>
        </member>
        <member name="M:scrgrab.Classes.ImageManager.ImageInfo.ParseDateTime(System.String)">
            <summary>
            Parse the value of image's date and time
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:scrgrab.Classes.ImageManager.ImageInfo.DateOf(System.DateTime)">
            <summary>
            Check if date of <see cref="P:scrgrab.Classes.ImageManager.ImageInfo.ImageDateTime"/> matches date of <paramref name="dateTime"/>
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="P:scrgrab.Classes.ImageManager.Images">
            <summary>
            access to images property
            </summary>
        </member>
        <member name="M:scrgrab.Classes.ImageManager.#ctor(System.String)">
            <summary>
            default constructor
            </summary>
            <param name="folder">String</param>
        </member>
        <member name="M:scrgrab.Classes.ImageManager.Enumerate(System.String)">
            <summary>
            static enumerate method to run the enumeration in a thread
            </summary>
            <param name="folder">String</param>
        </member>
        <member name="M:scrgrab.Classes.ImageManager.EnumerateToFile">
            <summary>
            enumerate folder/file list to a file
            </summary>
        </member>
        <member name="M:scrgrab.Classes.ImageManager.GetImages(System.DateTime)">
            <summary>
            get a list of available images for the given date
            </summary>
            <param name="date">DateTime</param>
        </member>
        <member name="M:scrgrab.Classes.ImageManager.IndexOfByTime(System.Int32)">
            <summary>
            Returns the index of the first image matching the specified time (regarless of image date) or -1 if none found
            </summary>
            <param name="hour"></param>
            <returns>int</returns>
        </member>
        <member name="M:scrgrab.Classes.ImageManager.NextImage">
            <summary>
            <see cref="T:scrgrab.Classes.ImageManager.ImageInfo"/> of the next, or last image
            </summary>
            <returns><see cref="T:scrgrab.Classes.ImageManager.ImageInfo"/></returns>
        </member>
        <member name="M:scrgrab.Classes.ImageManager.PrevImage">
            <summary>
            <see cref="T:scrgrab.Classes.ImageManager.ImageInfo"/> of the previous, or first image
            </summary>
            <returns><see cref="T:scrgrab.Classes.ImageManager.ImageInfo"/></returns>
        </member>
        <member name="M:scrgrab.Classes.Logger.#ctor(System.String)">
            <summary>
            standard logger with a working folder
            </summary>
            <param name="folder"></param>
        </member>
        <member name="M:scrgrab.Classes.Logger.Log(System.String,System.String)">
            <summary>
            Static member to simplify calling the Log method
            </summary>
            <param name="folder">location of the log file</param>
            <param name="value">log value</param>
        </member>
        <member name="T:scrgrab.Classes.Viewer">
            <summary>
            Image Viewer form
            </summary>
        </member>
        <member name="M:scrgrab.Classes.Viewer.#ctor">
            <summary>
            Image viewer form default constructor
            </summary>
        </member>
        <member name="F:scrgrab.Classes.Viewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:scrgrab.Classes.Viewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:scrgrab.Classes.Viewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:scrgrab.Timer.BDSTimer">
            <summary>
            Multi-media timer
            </summary>
        </member>
        <member name="M:scrgrab.Timer.BDSTimer.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:scrgrab.Timer.BDSTimer.#ctor(scrgrab.Timer.BDSTimer.OnTimerEvent,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Parameterised constructor. Once constructed, use Start() and Stop() to manage the timer
            </summary>
            <param name="ontimer">application supplied on-timer event</param>
            <param name="start_seconds">start time expressed in seconds since midnight</param>
            <param name="end_seconds">end time expressed in seconds since midnight</param>
            <param name="interval_seconds">trigger time (timer event) in milliseconds</param>
        </member>
        <member name="M:scrgrab.Timer.BDSTimer.IsOperational">
            <summary>
            check to see if the timer is still within the operational times
            </summary>
            <returns></returns>
        </member>
        <member name="M:scrgrab.Timer.BDSTimer.Lock">
            <summary>
            indicate the timer object will not be reset while properties are changed
            </summary>
        </member>
        <member name="M:scrgrab.Timer.BDSTimer.Start">
            <summary>
            start the timer; this calls GetNextStartTime to calculate the length of the timer interval
            which could be either the value of Interval or, if Now is after the EndTime, a calulated value 
            until the next StartTime
            </summary>
        </member>
        <member name="M:scrgrab.Timer.BDSTimer.Stop">
            <summary>
            stops the timer by deleting it from the timer queue
            </summary>
        </member>
        <member name="M:scrgrab.Timer.BDSTimer.GetNextStartTime">
            <summary>
            calculate number of milliseconds between now and the next time timer is due to become operational
            </summary>
            <returns></returns>
        </member>
        <member name="T:scrgrab.Timer.BDSTimerException">
            <summary>
            Custom exception for DBSTimer
            </summary>
        </member>
        <member name="M:scrgrab.Timer.BDSTimerException.#ctor">
            <summary>
            standard ctor
            </summary>
        </member>
        <member name="M:scrgrab.Timer.BDSTimerException.#ctor(System.String)">
            <summary>
            standard handler for BDSException when no inner-exception is specified
            </summary>
            <param name="message">the error message for this exception</param>
        </member>
        <member name="M:scrgrab.Timer.BDSTimerException.#ctor(System.String,System.Exception)">
            <summary>
            standard handler for BDSException when there is an inner-exception specified
            </summary>
            <param name="message">the error message for this exception</param>
            <param name="innerException">inner exception</param>
        </member>
        <member name="M:scrgrab.Timer.BDSTimerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            implemented by base
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:scrgrab.formMain">
            <summary>
            Application's main form
            </summary>
        </member>
        <member name="M:scrgrab.formMain.#ctor">
            <summary>
            Application's main form constructor
            </summary>
        </member>
        <member name="F:scrgrab.formMain.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:scrgrab.formMain.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:scrgrab.formMain.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:scrgrab.Program.Main">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:scrgrab.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:scrgrab.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:scrgrab.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
    </members>
</doc>
